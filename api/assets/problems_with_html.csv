title,html,problem_function,id
Two Sum,"
        <h3>Two Sum</h3>
        <p><strong>Problem Statement:</strong> Given an array of integers <code>nums</code> and an integer <code>target</code>, 
        return the indices of the two numbers that add up to <code>target</code>. You may assume that each input will have exactly 
        one solution, and you may not use the same element twice. You can return the answer in any order.</p>
        <p><strong>Example:</strong></p>
        <pre>Input: nums = [2, 7, 11, 15], target = 9<br>Output: [0, 1]</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        problems_with_html",TwoSum,0
Valid Parentheses,"
        <h3>Valid Parentheses</h3>
        <p><strong>Problem Statement:</strong> Given a string <code>s</code> containing just the characters '(', ')', '{', '}', '[', and ']', 
        determine if the input string is valid. A string is valid if:<ul>
        <li>Open brackets are closed by the same type of brackets.</li>
        <li>Open brackets are closed in the correct order.</li>
        </ul></p>
        <p><strong>Example:</strong></p>
        <pre>Input: s = ""()[]{}""<br>Output: true</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",ValidParentheses,1
Merge Two Sorted Lists,"
        <h3>Merge Two Sorted Lists</h3>
        <p><strong>Problem Statement:</strong> You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>. 
        Merge the two lists into one sorted linked list and return the merged list. The merged list should be made by splicing 
        together the nodes of the two lists.</p>
        <p><strong>Example:</strong></p>
        <pre>Input: list1 = [1, 2, 4], list2 = [1, 3, 4]<br>Output: [1, 1, 2, 3, 4, 4]</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",MergeTwoSortedLists,2
Best Time to Buy and Sell Stock,"
        <h3>Best Time to Buy and Sell Stock</h3>
        <p><strong>Problem Statement:</strong> You are given an array <code>prices</code> where <code>prices[i]</code> is the price of 
        a given stock on the <code>i</code>-th day. You want to maximize your profit by choosing a single day to buy one stock and 
        a different day in the future to sell that stock. Return the maximum profit you can achieve. If no profit can be achieved, 
        return <code>0</code>.</p>
        <p><strong>Example:</strong></p>
        <pre>Input: prices = [7, 1, 5, 3, 6, 4]<br>Output: 5</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",BestTimetoBuyandSellStock,3
Valid Palindrome,"
        <h3>Valid Palindrome</h3>
        <p><strong>Problem Statement:</strong> Given a string <code>s</code>, determine if it is a palindrome, considering only 
        alphanumeric characters and ignoring cases.</p>
        <p><strong>Example:</strong></p>
        <pre>Input: s = ""A man, a plan, a canal: Panama""<br>Output: true</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",ValidPalindrome,4
Invert Binary Tree,"
        <h3>Invert Binary Tree</h3>
        <p><strong>Problem Statement:</strong> Given the root of a binary tree, invert the tree and return its root. 
        Inverting a tree means swapping the left and right children of all nodes.</p>
        <p><strong>Example:</strong></p>
        <pre>Input:<br>    4<br>   / \<br>  2   7<br> / \ / \<br>1  3 6  9<br>Output:<br>    4<br>   / \<br>  7   2<br> / \ / \<br>9  6 3  1</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",InvertBinaryTree,5
Valid Anagram,"
        <h3>Valid Anagram</h3>
        <p><strong>Problem Statement:</strong> Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> 
        is an anagram of <code>s</code>, and <code>false</code> otherwise. An anagram is a word or phrase formed by rearranging the letters 
        of a different word or phrase, using all the original letters exactly once.</p>
        <p><strong>Example:</strong></p>
        <pre>Input: s = ""anagram"", t = ""nagaram""<br>Output: true</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",ValidAnagram,6
Binary Search,"
        <h3>Binary Search</h3>
        <p><strong>Problem Statement:</strong> Given a sorted array of integers <code>nums</code> and a target value <code>target</code>, 
        return the index of <code>target</code> in <code>nums</code>. If <code>target</code> does not exist, return <code>-1</code>. 
        You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>
        <p><strong>Example:</strong></p>
        <pre>Input: nums = [-1, 0, 3, 5, 9, 12], target = 9<br>Output: 4</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",BinarySearch,7
Flood Fill,"
        <h3>Flood Fill</h3>
        <p><strong>Problem Statement:</strong> An image is represented by an <code>m x n</code> integer grid <code>image</code> where 
        <code>image[i][j]</code> represents the pixel value of the image. Perform a flood fill on the image starting from the pixel 
        <code>image[sr][sc]</code>. Replace the color of the pixel and all adjacent pixels of the same color with <code>newColor</code>.</p>
        <p><strong>Example:</strong></p>
        <pre>Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2<br>Output: [[2,2,2],[2,2,0],[2,0,1]]</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",FloodFill,8
Lowest Common Ancestor of a Binary Search Tree,"
        <h3>Lowest Common Ancestor of a Binary Search Tree</h3>
        <p><strong>Problem Statement:</strong> Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes 
        <code>p</code> and <code>q</code>. The LCA of two nodes <code>p</code> and <code>q</code> is the lowest node in the tree that has both 
        <code>p</code> and <code>q</code> as descendants.</p>
        <p><strong>Example:</strong></p>
        <pre>Input:<br>      6<br>     / \<br>    2   8<br>   / \ / \<br>  0  4 7  9<br>    / \<br>   3   5<br>p = 2, q = 8<br>Output: 6</pre>
        <p><strong>Multiple Solutions?</strong> No</p>
        ",LowestCommonAncestorofaBinarySearchTree,9
